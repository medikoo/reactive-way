// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function () {
	var require = (function (modules) {
		var resolve, getRequire, wmRequire, notFoundError, findFile
		  , extensions = EXTENSIONS
		  , envRequire = typeof require === 'undefined' ? null : require
		  , initRequire;

		notFoundError = function (path) {
			var error = new Error("Could not find module '" + path + "'");
			error.code = 'MODULE_NOT_FOUND';
			return error;
		};
		findFile = function (scope, name, extName) {
			var i, ext;
			if (typeof scope[name + extName] === 'function') return name + extName;
			for (i = 0; (ext = extensions[extName][i]); ++i) {
				if (typeof scope[name + ext] === 'function') return name + ext;
			}
			return null;
		};
		resolve = function (scope, tree, path, fullPath, state, id) {
			var name, dir, exports, module, fn, found, i, ext;
			path = path.split(SEPARATOR);
			name = path.pop();
			if ((name === '.') || (name === '..')) {
				path.push(name);
				name = '';
			}
			while ((dir = path.shift()) != null) {
				if (!dir || (dir === '.')) continue;
				if (dir === '..') {
					scope = tree.pop();
					id = id.slice(0, id.lastIndexOf('/'));
				} else {
					tree.push(scope);
					scope = scope[dir];
					id += '/' + dir;
				}
				if (!scope) throw notFoundError(fullPath);
			}
			if (name && (typeof scope[name] !== 'function')) {
				found = findFile(scope, name, '.js');
				if (!found) found = findFile(scope, name, '.json');
				if (!found) found = findFile(scope, name, '.css');
				if (!found) found = findFile(scope, name, '.html');
				if (found) {
					name = found;
				} else if ((state !== 2) && (typeof scope[name] === 'object')) {
					tree.push(scope);
					scope = scope[name];
					id += '/' + name;
					name = '';
				}
			}
			if (!name) {
				if ((state !== 1) && scope[':mainpath:']) {
					return resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
				}
				return resolve(scope, tree, 'index', fullPath, 2, id);
			}
			fn = scope[name];
			if (!fn) throw notFoundError(fullPath);
			if (fn.hasOwnProperty('module')) return fn.module.exports;
			exports = {};
			fn.module = module = { exports: exports, id: id + '/' + name };
			fn.call(exports, exports, module, getRequire(scope, tree, id));
			return module.exports;
		};
		wmRequire = function (scope, tree, fullPath, id) {
			var name, path = fullPath, t = fullPath.charAt(0), state = 0;
			if (t === '/') {
				path = path.slice(1);
				scope = modules['/'];
				if (!scope) {
					if (envRequire) return envRequire(fullPath);
					throw notFoundError(fullPath);
				}
				id = '/';
				tree = [];
			} else if (t !== '.') {
				name = path.split('/', 1)[0];
				scope = modules[name];
				id = name;
				if (!scope) {
					if (envRequire) return envRequire(fullPath);
					throw notFoundError(fullPath);
				}
				tree = [];
				path = path.slice(name.length + 1);
				if (!path) {
					path = scope[':mainpath:'];
					if (path) {
						state = 1;
					} else {
						path = 'index';
						state = 2;
					}
				}
			}
			return resolve(scope, tree, path, fullPath, state, id);
		};
		getRequire = function (scope, tree, id) {
			return function (path) {
				return wmRequire(scope, [].concat(tree), path, id);
			};
		};
		initRequire = getRequire(modules, [], '');
		initRequire.modules = modules;
		return initRequire;
	})(INIT_MODULES);

	var ns = require('reactive-way/client/domjs').ns;
	(function (a, abbr, address, area, article, aside, audio, b, bdi, bdo,
		blockquote, br, button, canvas, caption, cite, code, col, colgroup, command,
		datalist, dd, del, details, device, dfn, div, dl, dt, em, embed, fieldset,
		figcaption, figure, footer, form, h1, h2, h3, h4, h5, h6, header, hgroup,
		hr, i, iframe, img, input, ins, kbd, keygen, label, legend, li, link, map,
		mark, menu, meter, nav, noscript, object, ol, optgroup, option, output, p,
		param, pre, progress, q, rp, rt, ruby, s, samp, script, section, select,
		small, source, span, strong, style, sub, summary, sup, table, tbody, td,
		textarea, tfoot, th, thead, time, tr, track, ul, _var, video, wbr, comment,
		text, element, insert, normalize, _if, and, browser, eq, eqSome, field, gt,
		gtOrEq, html, legacy, list, lt, ltOrEq, mmap, modal, not, or, postButton,
		resolve, stUrl, thumb, uploadButton, url) {
		require.modulesAPPLICATION_NAME.client.view = TEMPLATE_MODULES;
	}(ns.a, ns.abbr, ns.address, ns.area, ns.article, ns.aside, ns.audio, ns.b,
		ns.bdi, ns.bdo, ns.blockquote, ns.br, ns.button, ns.canvas, ns.caption,
		ns.cite, ns.code, ns.col, ns.colgroup, ns.command, ns.datalist, ns.dd,
		ns.del, ns.details, ns.device, ns.dfn, ns.div, ns.dl, ns.dt, ns.em,
		ns.embed, ns.fieldset, ns.figcaption, ns.figure, ns.footer, ns.form, ns.h1,
		ns.h2, ns.h3, ns.h4, ns.h5, ns.h6, ns.header, ns.hgroup, ns.hr, ns.i,
		ns.iframe, ns.img, ns.input, ns.ins, ns.kbd, ns.keygen, ns.label, ns.legend,
		ns.li, ns.link, ns.map, ns.mark, ns.menu, ns.meter, ns.nav, ns.noscript,
		ns.object, ns.ol, ns.optgroup, ns.option, ns.output, ns.p, ns.param, ns.pre,
		ns.progress, ns.q, ns.rp, ns.rt, ns.ruby, ns.s, ns.samp, ns.script,
		ns.section, ns.select, ns.small, ns.source, ns.span, ns.strong, ns.style,
		ns.sub, ns.summary, ns.sup, ns.table, ns.tbody, ns.td, ns.textarea,
		ns.tfoot, ns.th, ns.thead, ns.time, ns.tr, ns.track, ns.ul, ns._var,
		ns.video, ns.wbr, ns.comment, ns.text, ns.element, ns.insert, ns.normalize,
		ns._if, ns.and, ns.browser, ns.eq, ns.eqSome, ns.field, ns.gt, ns.gtOrEq,
		ns.html, ns.legacy, ns.list, ns.lt, ns.ltOrEq, ns.mmap, ns.modal, ns.not,
		ns.or, ns.postButton, ns.resolve, ns.stUrl, ns.thumb, ns.uploadButton,
		ns.url));

	return require;
}())